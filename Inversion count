//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int ans;
    void merge(long long int arr[],long long int low,long long int mid,long long int high){
        long long int left=low;
        long long int right=mid+1;
        vector<long long>temp;
        while(left<=mid and right<=high){
            if(arr[left]<=arr[right]){
                temp.push_back(arr[left]);
                left++;
            }else{
                ans+=(mid-left)+1;
                temp.push_back(arr[right]);
                right++;
            }
        }
        
        while(left<=mid){
            temp.push_back(arr[left]);
            left++;
        }
    
        while(right<=high){
            temp.push_back(arr[right]);
            right++;
        }
        long long int k=0;
        for(long i=low;i<=high;i++){
            arr[i]=temp[k];
            k++;
        }
    }
    void mergesort(long long arr[],long long int low,long long int high ){
        if(low<high){
            long long int mid=(low+high)>>1;
            mergesort(arr,low,mid);
            mergesort(arr,mid+1,high);
            merge(arr,low,mid,high);
        
        }
    }
    long long int inversionCount(long long arr[], long long N)
    {
        ans=0;
        mergesort(arr,0,N-1);
        
        return ans;
    }

};

//{ Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}

// } Driver Code Ends
