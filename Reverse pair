class Solution {
public:
    int ans;
    void merge(vector<int>&nums,int low,int mid,int high){
        int left=low;
        int right=mid+1;
        vector<int>temp;  
         while(left<=mid){
                int count=0;
                 while(right<=high){
                     long a=nums[left];
                     long b=nums[right];
                      b=b*2;
                     if(a>b){
                         ans+=(mid-left)+1;
                         right++;
                     }else{
                         break;
                     }
                 }
                 left++;
        }
        left=low;
        right=mid+1;
        while(left<=mid and right<=high){
            if(nums[left]<=nums[right]){
                temp.push_back(nums[left]);
                left++;
            }else{
                temp.push_back(nums[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.push_back(nums[left]);
            left++;
        }
        while(right<=high){
            temp.push_back(nums[right]);
            right++;
        }
        int k=0;
        for(int i=low;i<=high;i++){
            nums[i]=temp[k];
            k++;
        }
     
    }
    void mergesort(vector<int>&nums,int low,int high){
        if(low>=high){
            return;
        }
        int mid=(low+high)>>1;
        mergesort(nums,low,mid);
        mergesort(nums,mid+1,high);
        merge(nums,low,mid,high);
    }
    int reversePairs(vector<int>& nums) {
        ans=0;
        mergesort(nums,0,nums.size()-1);
        return ans;
    }
};
